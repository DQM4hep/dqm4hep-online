/// \file ModuleApi.cc
/*
 *
 * ModuleApi.cc source template automatically generated by a class generator
 * Creation date : ven. oct. 31 2014
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright
 */

// -- dqm4hep headers
#include "dqm4hep/ModuleApi.h"
#include "dqm4hep/ModuleApplication.h"
#include "dqm4hep/Logging.h"
#include "dqm4hep/Run.h"

namespace dqm4hep {

  namespace online {

    core::StatusCode ModuleApi::cd(const Module *const module) {
      RETURN_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      module->moduleApplication()->monitorElementManager()->cd();
      return core::STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    core::StatusCode ModuleApi::cd(const Module *const module, const std::string &dirName) {
      RETURN_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      return module->moduleApplication()->monitorElementManager()->cd(dirName);
    }

    //-------------------------------------------------------------------------------------------------

    core::StatusCode ModuleApi::mkdir(const Module *const module, const std::string &dirName) {
      RETURN_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      return module->moduleApplication()->monitorElementManager()->mkdir(dirName);
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &ModuleApi::pwd(const Module *const module) {
      THROW_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      return module->moduleApplication()->monitorElementManager()->pwd();
    }

    //-------------------------------------------------------------------------------------------------

    core::StatusCode ModuleApi::goUp(const Module *const module) {
      RETURN_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      return module->moduleApplication()->monitorElementManager()->goUp();
    }

    //-------------------------------------------------------------------------------------------------

    core::StatusCode ModuleApi::rmdir(const Module *const module, const std::string &dirName) {
      RETURN_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      return module->moduleApplication()->monitorElementManager()->rmdir(dirName);
    }

    //-------------------------------------------------------------------------------------------------

    bool ModuleApi::dirExists(const Module *const module, const std::string &dirName) {
      THROW_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      return module->moduleApplication()->monitorElementManager()->dirExists(dirName);
    }
    
    //-------------------------------------------------------------------------------------------------
    
    core::StatusCode ModuleApi::dump(const Module *const module) {
      RETURN_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      module->moduleApplication()->monitorElementManager()->dumpStorage();
      return core::STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    core::StatusCode ModuleApi::getMonitorElements(const Module *const module, OnlineElementPtrList &monitorElementList) {
      RETURN_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      module->moduleApplication()->monitorElementManager()->getMonitorElements(monitorElementList);
      return core::STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    core::StatusCode ModuleApi::getMonitorElement(const Module *const module, const std::string &monitorElementName, OnlineElementPtr &monitorElement) {
      RETURN_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      return module->moduleApplication()->monitorElementManager()->getMonitorElement(monitorElementName, monitorElement);
    }

    //-------------------------------------------------------------------------------------------------

    core::StatusCode ModuleApi::getMonitorElement(const Module *const module, const std::string &dirName, const std::string &monitorElementName, OnlineElementPtr &monitorElement) {
      RETURN_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      return module->moduleApplication()->monitorElementManager()->getMonitorElement(dirName, monitorElementName, monitorElement);
    }

    //-------------------------------------------------------------------------------------------------

    OnlineElementPtr ModuleApi::getMonitorElement(const Module *const module, const std::string &monitorElementName) {
      OnlineElementPtr monitorElement;
      THROW_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      THROW_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, module->moduleApplication()->monitorElementManager()->getMonitorElement(monitorElementName, monitorElement));
      return monitorElement;
    }

    //-------------------------------------------------------------------------------------------------

    OnlineElementPtr ModuleApi::getMonitorElement(const Module *const module, const std::string &dirName, const std::string &monitorElementName) {
      OnlineElementPtr monitorElement;
      THROW_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      THROW_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, module->moduleApplication()->monitorElementManager()->getMonitorElement(dirName, monitorElementName, monitorElement));
      return monitorElement;
    }

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    core::StatusCode ModuleApi::resetMonitorElements(const Module *const module) {
      RETURN_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      module->moduleApplication()->monitorElementManager()->resetMonitorElements();
      return core::STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    
    core::StatusCode ModuleApi::addQualityTest(const Module *const module, OnlineElementPtr monitorElement, const std::string &qualityTestName) {
      RETURN_RESULT_IF(core::STATUS_CODE_SUCCESS, !=, ModuleApi::checkModule(module));
      return module->moduleApplication()->monitorElementManager()->addQualityTest(monitorElement->path(), monitorElement->name(), qualityTestName);
    }
    
    //-------------------------------------------------------------------------------------------------
    
    core::StatusCode ModuleApi::checkModule(const Module *const module) {
      if(nullptr == module) {
        dqm_error( "ModuleApi::checkModule: module is nullptr!" );
        return core::STATUS_CODE_INVALID_PTR;
      }
      if(nullptr == module->moduleApplication()) {
        dqm_error( "ModuleApi::checkModule: module application is nullptr!" );
        return core::STATUS_CODE_NOT_INITIALIZED;
      }
      return core::STATUS_CODE_SUCCESS;
    }

  }

}

