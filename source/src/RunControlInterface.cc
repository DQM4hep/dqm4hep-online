/// \file RunControlInterface.cc
/*
 *
 * RunControlInterface.cc source template automatically generated by a class generator
 * Creation date : mar. oct. 7 2014
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include <dqm4hep/RunControlInterface.h>
#include <dqm4hep/RunControlServer.h>
#include <dqm4hep/Run.h>
#include <dqm4hep/Logging.h>

using namespace dqm4hep::core;

namespace dqm4hep {

  namespace online {

    void RunControlInterface::startNewRun(const dqm4hep::core::Run &r, const std::string &password) {
      if(!m_pServer) {
        throw StatusCodeException(STATUS_CODE_NOT_INITIALIZED);
      }
      m_pServer->runControl().startNewRun(r, password);
    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RunControlInterface::endCurrentRun(const dqm4hep::core::StringMap &parameters, const std::string &password) {
      if(!m_pServer) {
        throw StatusCodeException(STATUS_CODE_NOT_INITIALIZED);
      }
      m_pServer->runControl().endCurrentRun(parameters, password);
    }
    
    //-------------------------------------------------------------------------------------------------
    
    StartOfRunSignal &RunControlInterface::onStartOfRun() {
      if(!m_pServer) {
        throw StatusCodeException(STATUS_CODE_NOT_INITIALIZED);
      }
      return m_pServer->runControl().onStartOfRun();
    }
    
    //-------------------------------------------------------------------------------------------------
    
    EndOfRunSignal &RunControlInterface::onEndOfRun() {
      if(!m_pServer) {
        throw StatusCodeException(STATUS_CODE_NOT_INITIALIZED);
      }
      return m_pServer->runControl().onEndOfRun();
    }
    
    //-------------------------------------------------------------------------------------------------
    
    const RunControl& RunControlInterface::runControl() const {
      if(!m_pServer) {
        throw StatusCodeException(STATUS_CODE_NOT_INITIALIZED);
      }
      return m_pServer->runControl();
    }
    
    //-------------------------------------------------------------------------------------------------
    
    void RunControlInterface::setServer(RunControlServer *srv) {
      m_pServer = srv;
    }

  }

}
