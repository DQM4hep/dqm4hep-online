/// \file TestAnalysisModule.cc
/*
 *
 * TestAnalysisModule.cc source template automatically generated by a class generator
 * Creation date : mer. nov. 12 2014
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright
 */

// -- dqm4hep headers
#include "dqm4hep/Internal.h"
#include "dqm4hep/StatusCodes.h"
#include "dqm4hep/Cycle.h"
#include "dqm4hep/Module.h"
#include "dqm4hep/PluginManager.h"

namespace dqm4hep {

  namespace online {

    class TestAnalysisModule : public AnalysisModule {
    public:      
      TestAnalysisModule() = default;
      ~TestAnalysisModule() = default;
      
      void readSettings(const core::TiXmlHandle &handle) {
        auto element = handle.Element();
        core::TiXmlPrinter printer;
        element->Accept(&printer);
        dqm_info( "Received the following XML settings:" );
        std::cout << printer.Str() << std::endl;
      }
      void initModule() {
        dqm_info( "TestAnalysisModule::initModule" );
      }
      void startOfRun(core::Run &run) {
        dqm_info( "=> TestAnalysisModule::startOfRun: {0}", core::typeToString(run) );
      }
      void startOfCycle() {
        dqm_info( "====> TestAnalysisModule::startOfCycle" );
      }
      void endOfCycle(const EOCCondition &condition) {
        dqm_info( "====> TestAnalysisModule::endOfCycle: {0}", core::typeToString(condition) );
      }
      void endOfRun(const core::Run &run) {
        dqm_info( "=> TestAnalysisModule::endOfRun: {0}", core::typeToString(run) );
      }
      void endModule() {
        dqm_info( "TestAnalysisModule::endModule");
      }
      void process(core::EventPtr event) {
        dqm_info( "========> TestAnalysisModule::process: received event:");
        dqm_info( "========== Event {0}, run {1} ==", event->getEventNumber(), event->getRunNumber());
        dqm_info( "============> Event size: {0} bytes", event->getEventSize());
        dqm_info( "============> Time stamp: {0} ", core::typeToString(std::chrono::system_clock::to_time_t(event->getTimeStamp())));
      }
    };
    
    DQM_PLUGIN_DECL(TestAnalysisModule, "TestAnalysisModule");
  }

}
