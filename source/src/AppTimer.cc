  /// \file AppTimer.cc
/*
 *
 * AppTimer.cc source template automatically generated by a class generator
 * Creation date : dim. avr. 29 2018
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright 
 */


#include "dqm4hep/AppTimer.h"
#include "dqm4hep/AppEventLoop.h"

namespace dqm4hep {

  namespace online {
    
    AppTimer::AppTimer(AppEventLoop &loop) :
      m_eventLoop(loop) {
    }
    
    //-------------------------------------------------------------------------------------------------
    
    AppTimer::~AppTimer() {
    }
    
    //-------------------------------------------------------------------------------------------------
    
    void AppTimer::setSingleShot(bool single) {
      m_singleShot = single;
    }
    
    //-------------------------------------------------------------------------------------------------
    
    bool AppTimer::singleShot() const {
      return m_singleShot.load();
    }
    
    //-------------------------------------------------------------------------------------------------
    
    void AppTimer::setInterval(unsigned int msec) {
      m_interval = msec;
      m_eventLoop.startTimer(this);
    }
    
    //-------------------------------------------------------------------------------------------------
    
    unsigned int AppTimer::interval() const {
      return m_interval.load();
    }
    
    //-------------------------------------------------------------------------------------------------
    
    core::Signal<> &AppTimer::onTimeout() {
      return m_signal;
    }
    
    //-------------------------------------------------------------------------------------------------
    
    void AppTimer::start() {
      m_eventLoop.startTimer(this);
    }
    
    //-------------------------------------------------------------------------------------------------
    
    void AppTimer::stop() {
      m_eventLoop.stopTimer(this);
    }
    
    //-------------------------------------------------------------------------------------------------
    
    bool AppTimer::active() const {
      return m_active.load();
    }

  }

} 

