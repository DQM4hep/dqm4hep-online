/// \file Module.cc
/*
 *
 * Module.cc source template automatically generated by a class generator
 * Creation date : ven. sept. 5 2014
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright
 */

// -- dqm4hep headers
#include "dqm4hep/Module.h"

namespace dqm4hep {

  namespace online {

    void Module::setName(const std::string &module) {
      m_name = module;
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &Module::name() const {
      return m_name;
    }

    //-------------------------------------------------------------------------------------------------

    void Module::setDetectorName(const std::string &detector) {
      m_detectorName = detector;
    }
    
    //-------------------------------------------------------------------------------------------------
    
    const std::string &Module::detectorName() const {
      return m_detectorName;
    }

    //-------------------------------------------------------------------------------------------------

    void Module::setVersion(unsigned int major, unsigned int minor, unsigned int patch) {
      m_version.set(major, minor, patch);
    }
    
    //-------------------------------------------------------------------------------------------------

    const core::Version &Module::version() const {
      return m_version;
    }
    
    //-------------------------------------------------------------------------------------------------

    ModuleApplication *Module::moduleApplication() const {
      return m_moduleApplication;
    }

    //-------------------------------------------------------------------------------------------------

    void Module::setModuleApplication(ModuleApplication *application) {
      m_moduleApplication = application;
    }

  }

}

