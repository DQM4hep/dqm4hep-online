/// \file EventSource.h
/*
 *
 * EventSource.h header template automatically generated by a class generator
 * Creation date : mar. sept. 8 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_EVENTSOURCE_H
#define DQM4HEP_EVENTSOURCE_H

// -- dqm4hep headers
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/Internal.h>
#include <dqm4hep/Event.h>
#include <dqm4hep/EventStreamer.h>
#include <dqm4hep/Client.h>

// -- xdrstream headers
#include <xdrstream/BufferDevice.h>

namespace dqm4hep {

  namespace core {
    
    class EventSource;
    typedef std::shared_ptr<EventSource> EventSourcePtr;

    /** 
     *  @brief  EventSource class.
     *          Main interface for sending events to collectors (server process).
     *          Only one event source is allowed per process as the source is registered 
     *          using the network client id on the collector server side.
     *          It is possible to send events to multiple event collectors.
     *          A typical usage could be:
     *          @code
     *          EventSourcePtr source = EventSource::make_shared("EventBuilder");
     *          source->setStreamerName("GenericEventStreamer");
     *          source->addCollector("CentralCollector");
     *          source->addCollector("PrivateCollector");
     *          source->start();
     *          // ...
     *          Event *event = getLastEvent(); // hypothetical getter function  
     *          source->sendEvent(event); // send to all collectors
     *          @endcode
     */
    class EventSource
    {
    public:
      /**
       *  @brief  Factory method to create a shared pointer of event source
       *  
       *  @param  sourceName the source name
       */
      EventSourcePtr make_shared(const std::string &sourceName);

      /**
       *  @brief  Destructor
       */
      ~EventSource();

      /**
       *  @brief  Get the source name
       */
      const std::string &sourceName() const;
      
      /**
       *  @brief  Set the event streamer name.
       *          Must be set before calling start()
       *          
       *  @param  name the event streamer name
       */
      void setStreamerName(const std::string &name);
      
      /**
       *  @brief  Get the event streamer name
       */
      const std::string &streamerName() const;
      
      /**
       *  @brief  Add a new collector server to which events will be sent.
       *          Can be used only before calling start().
       *          Must be called at least one time before calling start().
       *          
       *  @param  name the event collector name
       */
      void addCollector(const std::string &name);
      
      /**
       *  @brief  Start the event source.
       *          Setup raw buffers, event streamer (plugin) and register it to event collectors
       */
      void start();

      /**
       *  @brief  Send a single event to all registered collectors.
       *          The event must be serializable by using the allocated streamer (see setStreamerName()).
       *  
       *  @param  event the event pointer to serialize and send
       */
      void sendEvent(const EventPtr &event);
      
      /**
       *  @brief  Send a single event to a single collector. The collector must have been registered
       *          with the function addCollector() before calling this function
       *          The event must be serializable by using the allocated streamer (see setStreamerName()).
       *
       *  @param  collector the event collector to send 
       *  @param  event the event pointer to serialize and send
       */
      void sendEvent(const std::string &collector, const EventPtr &event);
      
    private:
      /**
       *  @brief  Get the source info (host info + source info)
       *  
       *  @param  info the json value to receive
       */
      void getSourceInfo(Json::Value &info);
      
      /**
       *  @brief  Register the event source to the specified collector
       *  
       *  @param  collector the collector name to register to
       *  @param  info the source info to send to the collector
       *  @return bool whether the source was registered
       */
      bool registerMe(const std::string &collector, const Json::Value &info);
      
      /**
       *  @brief  Un-register the event source from the specified collector
       *  
       *  @param  collector the collector name to un-register to
       */
      void unregisterMe(const std::string &collector);
      
      /**
       *  @brief  Perform the actual event sending to the specified list of collectors
       *  
       *  @param  collectors the list of collectors
       *  @param  event     [description]
       */
      void sendEvent(const core::StringVector &collectors, const EventPtr &event);

    private:
      /** 
       *  @brief  Constructor
       *
       *  @param  sourceName the source name
       */
      EventSource(const std::string &sourceName);
      
      /**
       *  @brief  CollectorInfo struct
       */
      struct CollectorInfo
      {
        bool             m_registered = false;   ///< Whether the source is registered to the event collector
      };
      
    private:
      typedef std::shared_ptr<core::EventStreamer> EventStreamerPtr;
      typedef std::shared_ptr<xdrstream::BufferDevice> BufferDevicePtr;
      typedef std::map<std::string, CollectorInfo> CollectorInfoMap;
      
      bool                                m_started = false;               ///< Whether the event source was started
      std::string                         m_sourceName = "";               ///< The source name
      std::string                         m_streamerName = "";             ///< The event streamer name (plugin name)
      EventStreamerPtr                    m_eventStreamer = {nullptr};     ///< The event streamer pointer
      CollectorInfoMap                    m_collectorInfos = {};           ///< The map of event collector infos
      net::Client                         m_client;                        ///< The networking client interface 
      BufferDevicePtr                     m_bufferDevice = {nullptr};      ///< The serialized event raw buffer (from xdrstream)
    };

  }

} 

#endif  //  DQM4HEP_EVENTSOURCE_H
