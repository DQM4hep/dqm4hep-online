  /// \file AppTimer.h
/*
 *
 * AppTimer.h header template automatically generated by a class generator
 * Creation date : dim. avr. 29 2018
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright 
 */


#ifndef DQM4HEP_APPTIMER_H
#define DQM4HEP_APPTIMER_H

#include "dqm4hep/Internal.h"
#include "dqm4hep/StatusCodes.h"
#include "dqm4hep/Signal.h"

#include <atomic>

namespace dqm4hep {
  
  namespace online {
    
    class AppEventLoop;

    /**
     *  @brief  AppTimer class
     */
    class AppTimer {
      friend class AppEventLoop;
    public:
      /**
       *  @brief  Constructor
       */
      AppTimer(AppEventLoop &loop);
      
      /**
       *  @brief  Destructor
       */
      ~AppTimer();
      
      /**
       *  @brief  Set whether the timer is a single shot timer.
       *          After the timer reaches the timeout, if the 
       *          timer is not single shot, it is automatically restarted
       *          
       *  @param  single whether the timer is single shot 
       */
      void setSingleShot(bool single);
      
      /**
       *  @brief  Whether the timer is single shot
       */
      bool singleShot() const;
        
      /**
       *  @brief  Set the timer interval (unit milliseconds)
       * 
       *  @param  msec the timer interval (unit milliseconds)
       */
      void setInterval(unsigned int msec);
      
      /**
       *  @brief  Get the timer interval (unit milliseconds)
       */
      unsigned int interval() const;
      
      /**
       *  @brief  Get the timeout signal
       */
      core::Signal<> &onTimeout();
      
      /**
       *  @brief  Start the timer
       */
      void start();
      
      /**
       *  @brief  Stop the timer
       */
      void stop();
      
      /**
       *  @brief  Whether the timer is active
       */
      bool active() const;
      
    private:
      /// The application event loop
      AppEventLoop&                m_eventLoop;
      /// Whether the timer is single shot
      std::atomic_bool             m_singleShot = {true};
      /// The timer interval (unit milliseconds)
      std::atomic_uint             m_interval = {0};
      /// The timer timeout signal
      core::Signal<>               m_signal = {};
      /// Whether the timer is active
      std::atomic_bool             m_active = {false};
      /// The time point when the timer was started
      core::TimePoint              m_startTime = {};
    };
  
  }

} 

#endif  //  DQM4HEP_APPTIMER_H
